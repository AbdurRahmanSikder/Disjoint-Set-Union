#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

template <typename T, typename V>
void __print(const pair<T, V> &x)
{
  cerr << '{';
  __print(x.first);
  cerr << ',';
  __print(x.second);
  cerr << '}';
}
template <typename T>
void __print(const T &x)
{
  int f = 0;
  cerr << '{';
  for (auto &i : x)
    cerr << (f++ ? "," : ""), __print(i);
  cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v)
{
  __print(t);
  if (sizeof...(v))
    cerr << ", ";
  _print(v...);
}
#ifndef ONLINE_JUDGE
#define debug(x...)             \
  cerr << "[" << #x << "] = ["; \
  _print(x)
#else
#define debug(x...)
#endif
#define IOS                \
  ios::sync_with_stdio(0); \
  cin.tie(0);              \
  cout.tie(0);
#define endl "\n"
#define YES printf("YES\n")
#define NO printf("NO\n")
#define YES printf("YES\n")
#define NO printf("NO\n")
#define NOo printf("-1\n")
#define srt(x) sort(x.begin(), x.end())
#define rsrt(x) sort(x.rbegin(), x.rend())
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define pii pair<int, int>
#define piii pair<int, pii>
#define min_heap priority_queue<int, vector<int>, greater<int>>
const ll mod = 1000000007;
const ll inf = 1e9;
const ll N = 10000007;
#define vll vector<long long>
#define mll map<long long, long long>
vector<ll> parent(100005), sz(100005);
mll mp;
void make(ll n)
{
  for (int i = 1; i <= n; i++)
    parent[i] = i, sz[i] = 1;
}
ll find(ll u)
{
  if (parent[u] == u)
    return u;
  return parent[u] = find(parent[u]);
}
void Union(ll u, ll v)
{
  ll a = find(u);
  ll b = find(v);
  if (a != b)
  {
    if (sz[a] < sz[b]) // don't change the depth
      swap(a, b);
    parent[b] = a;
    sz[a] += sz[b];
  }
}
void solve()
{
  ll q, n, w, d = 0, h, i, f, g;
  cin >> n >> w;
  ll b[w + 1], c[w + 1], query[w + 1];
  for (i = 1; i <= w; i++)
  {
    cin >> b[i] >> c[i];
  }
  cin >> q;
  for (i = 1; i <= q; i++)
  {
    cin >> d;
    query[i] = d;
    mp[d]++; // which index are deleted
  }
  make(n);
  for (i = 1; i <= w; i++)
  {
    if (!mp[i]) // for all edges not deleted in the queries link them
    {
      Union(b[i], c[i]);
    }
  }
  g = 0;
  for (i = 1; i <= n; i++)
  {
    if (parent[i] == i)
      g++; // counting current connected component
  }
  vll store;
  for (i = q; i >= 1; i--)
  {

    store.pb(g); // maintain the counting of connected components
    f = find(b[query[i]]);
    h = find(c[query[i]]);
    if (f != h)
    { // if parent is not same then connecting two nodes thats why number of connect compnent will decrease
      g--;
      Union(b[query[i]], c[query[i]]);
    }
  }
  reverse(store.begin(), store.end());
  for (auto it : store)
    cout << it << " ";
  cout << endl;
}
int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ll t = 1;
  // cin >> t;
  while (t--)
  {
    solve();
  }
}
