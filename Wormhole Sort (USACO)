#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

template <typename T, typename V>
void __print(const pair<T, V> &x)
{
	cerr << '{';
	__print(x.first);
	cerr << ',';
	__print(x.second);
	cerr << '}';
}
template <typename T>
void __print(const T &x)
{
	int f = 0;
	cerr << '{';
	for (auto &i : x)
		cerr << (f++ ? "," : ""), __print(i);
	cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v)
{
	__print(t);
	if (sizeof...(v))
		cerr << ", ";
	_print(v...);
}
#ifndef ONLINE_JUDGE
#define debug(x...)               \
	cerr << "[" << #x << "] = ["; \
	_print(x)
#else
#define debug(x...)
#endif
#define IOS                  \
	ios::sync_with_stdio(0); \
	cin.tie(0);              \
	cout.tie(0);
#define endl "\n"
#define YES printf("YES\n")
#define NO printf("NO\n")
#define YES printf("YES\n")
#define NO printf("NO\n")
#define NOo printf("-1\n")
#define srt(x) sort(x.begin(), x.end())
#define rsrt(x) sort(x.rbegin(), x.rend())
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define pii pair<int, int>
#define piii pair<int, pii>
#define min_heap priority_queue<int, vector<int>, greater<int>>
const ll mod = 1000000007;
const ll inf = 1e9;
const ll N = 10000007;
#define vll vector<long long>
#define mll map<long long, long long>
vector<ll> parent(200005), sz(200005);
vector<ll> ax(200009);
mll mp;
set<ll> st;
ll connected, ct1 = 0, ct2 = 0;
struct edge
{
	ll u;
	ll v;
	ll wt;
};
vector<edge> graph;
void make(ll n)
{
	for (int i = 1; i <= n; i++)
		parent[i] = i, sz[i] = 1;
}
ll find(ll u)
{
	if (parent[u] == u)
		return u;
	return parent[u] = find(parent[u]);
}
void Union(ll u, ll v)
{
	ll a = find(u);
	ll b = find(v);
	if (a != b)
	{
		if (sz[a] < sz[b]) // don't change the depth
			swap(a, b);
		parent[b] = a;
		sz[a] += sz[b];
	}
}
bool check(ll weight, ll n)
{
	make(n);
	for (auto [u, v, w] : graph)
	{
		if (w >= weight)
			Union(u, v);
	}
	for (ll i = 1; i <= n; i++)
	{
		if (find(i) != find(ax[i]))
			return 0;
	}
	return 1;
}
void binarysearch(ll n)
{
	ll maxn = 1e9 + 10;
	ll l = -1, r = maxn, ans, mid;
	while (l <= r)
	{
		mid = (l + r) / 2;
		if (check(mid, n))
		{
			ans = mid;
			l = mid + 1;
		}
		else
			r = mid - 1;
	}
	cout << ans << endl;
}
void solve()
{
	ll q, n, m, e, w, d = 1, h, i, f, g, u, v, wt;
	cin >> n >> e;

	for (i = 1; i <= n; i++)
	{
		cin >> ax[i];
		if(ax[i] == d) d++;
	}
	if(d > n)
	{
		cout<<-1<<endl;
		return;
	}
	for (i = 1; i <= e; i++)
	{
		cin >> u >> v >> wt;
		graph.pb({u, v, wt});
	}
	binarysearch(n);
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	 freopen("wormsort.in", "r", stdin);
	 freopen("wormsort.out", "w", stdout);
	ll t = 1;
	// cin >> t;
	while (t--)
	{
		solve();
	}
}
